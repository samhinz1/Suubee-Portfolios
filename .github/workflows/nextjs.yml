# GitHub Pages deployment workflow for Next.js
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next
      - name: Install dependencies
        run: pnpm install
      - name: Check Next.js config
        run: cat next.config.mjs
      - name: Build with Next.js
        run: pnpm build
        env:
          NODE_ENV: production
      - name: Fix GitHub Pages 404 issue
        run: |
          # Ensure directory exists
          mkdir -p ./out
          # Create a .nojekyll file to prevent Jekyll processing
          touch ./out/.nojekyll
          # Copy index.html to the output directory if it exists
          if [ -f "index.html" ]; then
            cp index.html ./out/
          fi
          # Copy public/index.html if it exists
          if [ -f "public/index.html" ]; then
            cp public/index.html ./out/
          fi
          # If 404 page doesn't exist, create a copy of index.html as 404.html
          if [ ! -f "./out/404.html" ] && [ -f "./out/index.html" ]; then
            cp ./out/index.html ./out/404.html
          fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 